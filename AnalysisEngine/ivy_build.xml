<?xml version="1.0"?>
<project name="AnalysisEngine" default="tests" basedir="."
		 xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--  =================== Properties ====================================== -->
	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<property name="env" environment="env" value="env" />
	<property name="JAVA_HOME" value="${env.JAVA_HOME}" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />

	<property name="build.home" value="build/sandbox" />
	<property name="build.dist.dir" value="${build.home}/dist" />
<!--<property name="build.dist.dir.lib" value="${build.home}/dist/lib" />-->
	<property name="build.classes.dir" value="${build.dist.dir}/classes" />

	<property name="reports.dir" value="${build.home}/reports" />
	<property name="reports.tests.dir" value="${reports.dir}/tests" />

	<property name="test.unit.dir" value="test/unit" />

	<property name="app.name" value="ae" />
	<property name="app.path" value="/${app.name}" />

	<!-- begin Ivy properties -->
	<property name="common.dir" value="${ivy.default.ivy.user.dir}"/>
	<property name="ivy.default.ivy.user.dir" value="${ivy.default.ivy.user.dir}"/>
	<property name="repo.downloader.dir" value="${user.home}/.ivy2/download" />
	<ivy:settings file="${basedir}/../ivysettings.xml" id="ivy.instance" />
	<!-- end Ivy properties -->

	<target name="retrieve">
		<ivy:resolve/>
		<ivy:cachepath pathid="build.path" conf="analysis_engine"/>
		<ivy:cachepath pathid="test.build.path" conf="test"/>
		<ivy:cachepath pathid="runtime.path" conf="runtime"/>
	</target>

	<target name="resolve" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="repository/[artifact]-[revision].[ext]" />
	</target>


	<target name="resolve-clean-cache" description="Cleans Ivy cache">
		<ivy:cleancache />
	</target>

	<!--<path id="classpath">-->
		<!--<pathelement location="${build.classes.dir}" />-->
		<!--<fileset dir="${lib.dir}">-->
			<!--<include name="**/*.jar" />-->
		<!--</fileset>-->
	<!--</path>-->

	<target name="init">
		<mkdir dir="${build.home}" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.tests.dir}" />
	</target>


	<target name="clean">
		<delete includeemptydirs="true" failonerror="no">
			<fileset dir="${build.home}" includes="**/*" />
		</delete>
	</target>

	<target name="compile-src" depends="clean, init, retrieve">
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="on" source="1.8" target="1.8">
			<classpath>
				<path refid="build.path" />
				<path refid="test.build.path" />
			</classpath>
		</javac>

		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<!--<ivy:resolve file="${ivy.file}"/>-->
		<!--<ivy:publish organisation="epa" module="analysis-engine"  revision="${app.version}" artifactspattern="${build.classes.dir}/[artifact].[ext]" pubrevision="${app.version}" status="release" resolver="local" forcedeliver="true" >-->
		<!--</ivy:publish>-->
	</target>

	<target name="compile" depends="clean, init, compile-src" />

	<target name="do-dist" depends="publish" >
	</target>

	<target name="do-dist-src" depends="compile" >
	</target>

	<target name="jar" depends="compile">
		<jar jarfile="${build.home}/${app.name}.jar" basedir="${build.classes.dir}" />
	</target>

	<target name="publish" description="Publish this build into repository" depends="jar">
		<ivy:resolve />
		<!--<ivy:deliver module="analysis-engine" organisation="epa"/>-->
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss"/>
		</tstamp>
		<ivy:publish artifactspattern="${build.home}/[artifact].[ext]"
					 resolver="local"
					 pubrevision="${app.version}"
					 pubdate="${now}"
					 status="integration"
					 forcedeliver="true"
					 overwrite="true"
					 publishivy="true"

				/>
<!--		<ivy:cleancache />
		<ivy:retrieve  
			inline="true"
			overwritemode="always"
			sync="true"
			 />-->
		<!--ivy:install organisation="epa" module="analysis-engine"  revision="${app.version}"
				overwrite="true"
				from="local" to="local" /-->
	</target>

	<target name="install_local_cosu" description="Publish local cosu jar into repository">
		<!--<ivy:resolve file="lib/kmlGenerator-0.1.xml" haltonfailure="false" />-->
		<ivy:retrieve file="lib/cosu-1.0.xml" haltonfailure="false" />
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss"/>
		</tstamp>
		<ivy:publish 
				artifactspattern="lib/[artifact].[ext]"
				organisation="org.iscmem"
				module="cosu"
				revision="1.0"
				resolver="local"
				pubrevision="1.0"
				pubdate="${now}"
				forcedeliver="true"
				overwrite="true"
				status="release"
				/>
		<ivy:install organisation="org.iscmem" module="cosu"
					 revision="1.0" transitive="true" overwrite="true"
					 from="local" to="local" />
	</target>

	
	<target name="full-dist" depends="full-dist-sandbox" description="Builds the EMF Client distribution ">
		<zip destfile="${build.home}/AnalysisEngine.zip" basedir="${build.dist.dir}" includes="lib/**,*.jar,*.bat,*.txt" />
	</target>

	<target name="full-dist-sandbox" depends="compile" description="Builds the sandbox for AE distribution">
		<mkdir dir="${build.dist.dir}" />
		<mkdir dir="${build.dist.dir.lib}" />

		<ivy:retrieve pattern="${build.dist.dir.lib}/[artifact].[ext]" />
		<!--<copy todir="${build.dist.dir.lib}">-->
			<!--<fileset dir="${lib.dir}" />-->
		<!--</copy>-->
		<jar jarfile="${build.dist.dir}/${app.name}.jar" basedir="${build.classes.dir}">
			<include name="**/*" />
		</jar>
		<copy todir="${build.dist.dir}">
			<fileset dir="${basedir}/deploy">
				<include name="User_Prefs.txt" />
				<include name="AnalysisEngine.bat" />
				<include name="ReadMe.txt" />
			</fileset>
		</copy>
	</target>


	<!-- Test Targets -->

	<target name="compile-tests" depends="clean, init, compile-src">
		<javac srcdir="${test.unit.dir}" destdir="${build.classes.dir}" debug="on">
			<classpath>
				<path refid="build.path" />
				<path refid="test.build.path" />
			</classpath>
		</javac>
	</target>

	<target name="do-tests" depends="retrieve">
		<junit printsummary="yes" haltonfailure="no" showoutput="yes">
			<classpath>
				<path refid="build.path" />
				<path refid="test.build.path" />
				<pathelement location="${build.classes.dir}" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${reports.tests.dir}">
				<fileset dir="${build.classes.dir}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="tests" depends="compile-tests, do-tests"  />

</project>
